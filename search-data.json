[
    
    
    
        
            {
                "id": 0,
                "href": "https://www.harshad.me/posts/quick-cscope-emacs-hack/",
                "title": "Quick emacs+cscope hack for broken symlinks",
                "section": "posts",
                "date" : "2020.10.12",
                "body": " I use cscope in emacs as my primary code browsing tool for Linux kernel development. However, I started to get annoyed by cscope errors for broken symlinks. What is happening is that during the Linux kernel build process, a few symlinks get created which are not needed once the kernel is built. I presume that the build tooling doesn\u0026#39;t clean up these symlinks after they are removed and that confuses the cscope program. This results in the following annoying messages when I try to lookup definition or text or anything:\n====================================================================== Finding symbohttp:// EXT4_FC_TAG_LINK Database directory: /usr/local/google/home/harshads/repo/github-harshadjs-linux/ cscope: cannot find file include/dt-bindings/input/linux-event-codes.h cscope: cannot find file include/dt-bindings/clock/qcom,dispcc-sm8150.h cscope: cannot find file tools/testing/selftests/powerpc/nx-gzip/include/vas-api.h cscope: cannot find file tools/testing/selftests/powerpc/vphn/vphn.c cscope: cannot find file tools/testing/selftests/powerpc/vphn/asm/lppaca.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/ppc_asm.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/asm-compat.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/feature-fixups.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/asm/asm-const.h cscope: cannot find file tools/testing/selftests/powerpc/primitives/word-at-a-time.h fs/ext4/fast_commit.h: \u0026lt;global\u0026gt;[10] #define EXT4_FC_TAG_LINK 0x0004 fs/ext4/fast_commit.c: __ext4_fc_track_link[443] args.op = EXT4_FC_TAG_LINK; ext4_fc_replay_link[1360] trace_ext4_fc_replay(sb, EXT4_FC_TAG_LINK, darg.ino, tag2str[1776] case EXT4_FC_TAG_LINK: ext4_fc_replay_scan[1951] case EXT4_FC_TAG_LINK: ext4_fc_replay[2056] case EXT4_FC_TAG_LINK: These cannot find file messages get flooded in the cscope tiny buffer. For now, I have implemented a quick fix where I have added a wrapper around cscope that directs the messages wrote to stderr to /dev/null. Here\u0026#39;s how it looks:\n#!/bin/bash cscope-bin $@ 2\u0026gt;/dev/null With this, now the cscope buffer looks pretty again!\n====================================================================== Finding symbohttp:// EXT4_FC_TAG_LINK Database directory: /usr/local/google/home/harshads/repo/github-harshadjs-linux/ fs/ext4/fast_commit.h: \u0026lt;global\u0026gt;[10] #define EXT4_FC_TAG_LINK 0x0004 fs/ext4/fast_commit.c: __ext4_fc_track_link[443] args.op = EXT4_FC_TAG_LINK; ext4_fc_replay_link[1360] trace_ext4_fc_replay(sb, EXT4_FC_TAG_LINK, darg.ino, tag2str[1776] case EXT4_FC_TAG_LINK: ext4_fc_replay_scan[1951] case EXT4_FC_TAG_LINK: ext4_fc_replay[2056] case EXT4_FC_TAG_LINK: Links to this note "
            }
    
        ,
            {
                "id": 1,
                "href": "https://www.harshad.me/posts/static-website/",
                "title": "Static Website with Password Protection",
                "section": "posts",
                "date" : "2020.05.11",
                "body": " After numerous attempts at finding a cheap and easy solution to making a password protected static website, I finally have settled my mind on one! Before going over the solution let me go over the requirements that I had in my mind for the website:\nCheap Static and blog-aware Password protection on a part of the website Smooth and easy workflow to move content from private part to public Preferably, an automatic CI/CD I tried multiple solutions such as setting up Heroku dynos, CloudCanon etc. None of the solutions satisfied all the requirements until I found this option:\nGitHub + Jekyll + Makefile + AWS S3 + AWS Lambda\nLet me paint a high level picture of how the setup looks like:\nTwo GitHub Repositories Website content is split into two parts: public and private repositories. The public repository works like any other static website hosted on GitHub.\nIt contains all the jekyll build material and public posts. Private repository only contains posts that are private.\nPublic Repository Hosting The public repository gets hosted on GitHub pages as any other static website. This takes care of the public part of the website.\nSetting up private part is slightly complex but it\u0026#39;s a one-time effort. I\u0026#39;ll try to provide a high-level overview how that works.\nPassword Protection The private content is hosted in an AWS S3 bucket which only allows AWS CloudFront to read the contents. I then setup AWS Lambda that runs when a viewer tries to read content via CloudFront distribution. Here\u0026#39;s a step-by-step tutorial on how to set up S3 and CloudFront.\nBuilding Private Website In order to build the private website, we are going to need both the public and private repositories. After cloning the public repository, we create a directory named \u0026lt;public_repo\u0026gt;/_posts_private and clone the private repository in it. Yeah, we could have used git submodules. But, given that the _posts_private should point to a private repository, if we use submodules, it will break GitHub\u0026#39;s CI/CD for the public website. We don\u0026#39;t want that to break. So, we manually clone the private repository inside _posts_private folder. The magic happens inside the Makefile.\nCommand Action make _site_private Build private website make _site_public Build public website make serve_private Build and run private website locally make serve_public Build and run public website locally make sync Update private repository on S3 make clean Clean directory After running make sync, we can see that the private part of the website is published to S3/CloudFront. If you try to access it via CloudFront URL, you\u0026#39;ll see that a dialog pops up asking for your username and password.\nTying Private and Public Repositories Together Ok so we now have public part of the website working on GitHub pages and the private part of the website working on S3/CloudFront. We are now going to tie them together using a custom domain name! Domain names are pretty cheap (10-20$/yr). So, what I did was I bought this domain name and configured the DNS such that harshad.me points to the GitHub URL and personal.harshad.me points to cloudfront URL. Here\u0026#39;s how the DNS entries look:\nName Type Resolves to Comment harshad.me A 185.199.108.153 GitHub IPs 185.199.109.153 185.199.110.153 185.199.111.153 aws_verifier_key.personal CNAME aws_verifier_val.aws. personal CNAME CloudFront URL â€¦and there you go! At the end of this, I had my public site live at - http://harshad.me and the private part of the site is live at https://personal.harshad.me!\nLinks to this note "
            }
    
        ,
            {
                "id": 2,
                "href": "https://www.harshad.me/posts/writing-music-chords/",
                "title": "Organizing Song chords",
                "section": "posts",
                "date" : "2020.05.01",
                "body": " I often struggled to keep chords for songs I played in a handy place. For a couple of years I have been maintaining chords in a Google Doc. Given the forgetful person that I\u0026#39;m, storing all the chords in one place has come as a blessing. Having all the chords in one place has helped me to be more organized about my music. It has helped me collaborate better with other musicians.\nHowever, using Google Docs for organizing chords has not since scaled as I added more and more songs. Besides, I was maintaining all the chords in one file. Maybe having individual files would have helped the cause but it was nowhere close to what for example UltimateGuitar provides.\nI have since migrated all the chords from the google doc onto my personal website where I write song chords in plain text format (in org-mode files) and using Hugo\u0026#39;s magic shortcodes to detect chords and present them in a way such that it is easy to follow.\nThis has worked wonders for me and this post is meant to give a high level idea of how you can use Hugo shortcodes, to organize and present chords for your songs!\nHugo Short Code for Chords I defined a new short code called chords to define the section of a post where song chords are found. What this shortcodee does is that it recognizes all the chords in its content using the following regular expression:\n[A-G][b#]?((b|maj|add|m|sus|dim|aug)*[0-9]*)*[^\\\\w] Marking Chords in Markdown I defined a new \u0026lt;chords\u0026gt; tag (note that this is not a HTML tag) as a way to indicate that all the content following this tag should be rendered as chords. This is ugly but it works for my usecase. Chords marker makes Liquid templating language use a \u0026lt;pre\u0026gt; with a CSS class for all the content that follows. As you will see in the following section, it\u0026#39;s critical that you use monospace font for rendering this =\u0026lt;pre\u0026gt;=formatted text in order to maintain the mapping of where chords change according to lyrics.\n\u0026lt;chords\u0026gt; I got my first real six-string, Bought it at the five-and-dime The next step is to write chords for the songs. I first place chords just above the lyrics where the chords change and then annotate (and differentiate) chords (from lyrics) by placing them in square brackets. Square brackets encountered after \u0026lt;chords\u0026gt; tag tell Liquid templating language that these are chords and should have a special css style assigned to it.\n\u0026lt;chords\u0026gt; [D A] I got my first real six-string, Bought it at the five-and-dime Song sections (such as chorus, verse, prechorus) in the song use \u0026lt;ctag\u0026gt;\u0026lt;/ctag\u0026gt; tag.\n[D A] Jimmy quit, Joey got married, I shoulda known we\u0026#39;d never get far \u0026lt;ctag\u0026gt;Chorus\u0026lt;/ctag\u0026gt; [Bm A D G] Oh, when I look back now, That summer seemed to last forever Liquid Templating to Render Chords I then have following code in my layout file that renders chords.\nNote: In order to not confuse Liquid Templating used for this post, I have left spaces between {, } and % characters.\n{ % if page.categories contains \u0026#34;chords\u0026#34; % } { % assign var content_split = content | split:\u0026#34;\u0026lt;chords\u0026gt;\u0026#34; % } { { content_split[0] } } \u0026lt;pre class=\u0026#39;highlight\u0026#39;\u0026gt;{ { content_split[1] | replace: \u0026#34;[\u0026#34;, \u0026#34;\u0026lt;span class=\u0026#39;chords\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;]\u0026#34;, \u0026#34;\u0026lt;/span\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;chords\u0026gt;\u0026#34;, \u0026#34;\u0026lt;pre class=\u0026#39;highlight\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;ctag\u0026gt;\u0026#34;, \u0026#34;\u0026lt;span class=\u0026#39;ctag\u0026#39;\u0026gt;\u0026#34; | replace: \u0026#34;\u0026lt;/ctag\u0026gt;\u0026#34;, \u0026#34;\u0026lt;/span\u0026gt;\u0026#34; } }\u0026lt;/pre\u0026gt; { % else % } { { content } } { % endif % } JS Tricks I also have added a few Javascript tricks to implement some interesting functions such as Transpose and Auto-scroll which I first found on UltimateGuitar. These functions come very handy! For those who are interested here\u0026#39;s how the JS code for each look like. Just place these in the appropriate location (right before the { { content_split[0] } } line) in the above template.\nAuto-scroll window.scroll_state = 0; function autoscroll() { if (window.scroll_state == 0) { scroll = setInterval(function() { window.scrollBy(0, 1); console.log(\u0026#39;start\u0026#39;);}, 100); window.scroll_state = 1; } else { window.scroll_state = 0; clearInterval(scroll); console.log(\u0026#39;stop\u0026#39;); } } \u0026lt;button onclick=\u0026#34;autoscroll();\u0026#34;\u0026gt;Autoscroll\u0026lt;/button\u0026gt; Transpose function transpose(direction) { var ele = document.getElementsByClassName(\u0026#39;chords\u0026#39;); // 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 // C,C#, D,D#, E, F,F#, G,G#, A,A#, B for(var i=0;i\u0026lt;ele.length;i++) { var text = ele[i].textContent; if (direction == 1) { text = text.replace(/C/g, \u0026#34;##\u0026#34;); text = text.replace(/D/g, \u0026#34;####\u0026#34;); text = text.replace(/E/g, \u0026#34;######\u0026#34;); text = text.replace(/F/g, \u0026#34;#######\u0026#34;); text = text.replace(/G/g, \u0026#34;#########\u0026#34;); text = text.replace(/A/g, \u0026#34;###########\u0026#34;); text = text.replace(/B/g, \u0026#34;#\u0026#34;); } else { text = text.replace(/C/g, \u0026#34;############\u0026#34;); text = text.replace(/D/g, \u0026#34;##\u0026#34;); text = text.replace(/E/g, \u0026#34;####\u0026#34;); text = text.replace(/F/g, \u0026#34;#####\u0026#34;); text = text.replace(/G/g, \u0026#34;#######\u0026#34;); text = text.replace(/A/g, \u0026#34;#########\u0026#34;); text = text.replace(/B/g, \u0026#34;###########\u0026#34;); } text = text.replace(/#############/g, \u0026#34;C\u0026#34;); text = text.replace(/############/g, \u0026#34;B\u0026#34;); text = text.replace(/###########/g, \u0026#34;AA\u0026#34;); text = text.replace(/##########/g, \u0026#34;A\u0026#34;); text = text.replace(/#########/g, \u0026#34;GG\u0026#34;); text = text.replace(/########/g, \u0026#34;G\u0026#34;); text = text.replace(/#######/g, \u0026#34;FF\u0026#34;); text = text.replace(/######/g, \u0026#34;F\u0026#34;); text = text.replace(/#####/g, \u0026#34;E\u0026#34;); text = text.replace(/####/g, \u0026#34;DD\u0026#34;); text = text.replace(/###/g, \u0026#34;D\u0026#34;); text = text.replace(/##/g, \u0026#34;CC\u0026#34;); text = text.replace(/#/g, \u0026#34;C\u0026#34;); text = text.replace(/AA/g, \u0026#34;A#\u0026#34;); text = text.replace(/GG/g, \u0026#34;G#\u0026#34;); text = text.replace(/FF/g, \u0026#34;F#\u0026#34;); text = text.replace(/DD/g, \u0026#34;D#\u0026#34;); text = text.replace(/CC/g, \u0026#34;C#\u0026#34;); ele[i].textContent = text; } } \u0026lt;button onclick=\u0026#34;transpose(1);\u0026#34;\u0026gt;+1\u0026lt;/button\u0026gt; \u0026lt;button onclick=\u0026#34;transpose(0);\u0026#34;\u0026gt;-1\u0026lt;/button\u0026gt; Have fun adding chords to your blog! Links to this note "
            }
    
        ,
            {
                "id": 3,
                "href": "https://www.harshad.me/posts/dil-mein-jagi/",
                "title": "Dil Mein Jaagi",
                "section": "posts",
                "date" : "2020.04.28",
                "body": " Dil mein jaagi is a beautiful composition by Amit Trivedi. Check out the original song here. However, it has been highly under noticed. My wife Rithisha (who is an amazing singer() btw) and I decided to give this song a shot. What started as just a jam back in 2016 summer, ended up becoming a full fledged performance. All thanks to Rithisha, Shardul, Rucha and Vaishnavh for their amazing contributions. Special thanks to Google for providing a place to practice and record without which this wouldn\u0026#39;t have been possible.\nWe hope that this cover brings more visibility to the original song :).\nLinks to this note "
            }
    
        ,
            {
                "id": 4,
                "href": "https://www.harshad.me/posts/rehna-tu/",
                "title": "Rehna Tu",
                "section": "posts",
                "date" : "2019.05.06",
                "body": " Rehna Tu is originally a song from movie Delhi 6. We interpreted it very differently and here\u0026#39;s our take on it.\nLinks to this note "
            }
    
        ,
            {
                "id": 5,
                "href": "https://www.harshad.me/posts/yaava-mohana/",
                "title": "Yaava Mohana",
                "section": "posts",
                "date" : "2019.05.06",
                "body": " This is a really beautiful Kannada composition! I fell in love with it the first time I heard it. Do listen :)\nLinks to this note "
            }
    
        ,
            {
                "id": 6,
                "href": "https://www.harshad.me/about/",
                "title": "About Me",
                "section": "",
                "date" : "0001.01.01",
                "body": " Harshad Shirwadkar Seattle, WA Hi! I'm Harshad. I live in the beautiful city of Seattle and work for Google. As a part of my work and as a hobby, I contribute to the development of upstream Linux kernel. Here are the patches that I have contributed to the Linux Kernel. I also like to play piano. Please check my music page for my collaborations with other musicians. Projects Ext4 Fast Commits Google 2019 - 2020 Worked on adding a new journalling scheme for Ext4 file system that improves Ext4 performance in data=ordered mode. These patches are merged into upstream linux kernel.\nExt4 Freespace Trees Google Summer 2020 Mentored an intern and later enhanced their work to add a free space tree based allocator for Ext4 file system. The patches are in review.\nThe Web in the Face of Future Internet Architectures Carnegie Mellon University 2015-2016 Improving HTTP/HTTPS by leveraging Content Addressability of eXpressive Internet Architecture(XIA), an inter- net architecture proposed by CMU to natively support Evolvability and Information Centric Networking principles. Also designed and implemented caching service, reliable transport and content distribution for XIA Network Stack.\nPebblesOS - a UNIX like operating system Carnegie Mellon University 2015 As a part of Operating Systems Course (15-415) at CMU, wrote a unix-like operating system from scratch. PebblesOS boots in VirtualBox and has a default shell implemented. Code can be made available upon request.\nNext4 - Snapshots support for Ext4 file system Pune Institute of Computer Technology 2010 - 2011 Designed and implemented Read-only Snapshots for Ext4 file system\nExperience Google Senior Software Engineer 2016 - Present I am a part of Google\u0026rsquo;s storage team responsible for developing low level software including file systems, block layer features for Google\u0026rsquo;s production servers and GCP.\nCarnegie Mellon University Graduate Student Researcher 2015 - 2016 Worked with eXpressive Internet Architecture team at CMU on various Network and Transport layer issues in XIA Network Stack.\nAirTight Networks Senior Software Engineer 2011 - 2014 Worked on various driver level and application level features for Wi-Fi access points and WIPS (Wireless Intrusion Prevention Systems)\nContent Analytics - In driver connection tracker and HTTP/HTTPS parser ARP spoofer - Driver level ARP spoofer for WIPS Wireless Event Handler - Designed and implemented a inter-module communication framework based on UNIX sockets for AirTight AP Bandwidth Control - Designed and implemented bandwidth control feature for AirTight AP Debugged critical field issues in Wi-Fi driver and host ap daemon. Google Summer of Code Student Software Developer 2011 Designed and implemented Snapshot revert feature for Next4 file system.\nEducation Carnegie Mellon University Master's in Information Networking 2014-2016 Courses: OS Design and Implementation (15-415), Computer Networking (15-551), Probability and Computing (15-359), Storage Systems (18-746) Pune University of Computer Technology Bachelor's in Computer Engineering 2011-2014 "
            }
    
        ,
            {
                "id": 7,
                "href": "https://www.harshad.me/contact/",
                "title": "Contact Me",
                "section": "",
                "date" : "0001.01.01",
                "body": " "
            }
    
        ,
            {
                "id": 8,
                "href": "https://www.harshad.me/music/",
                "title": "Music",
                "section": "",
                "date" : "0001.01.01",
                "body": "Over the years I\u0026rsquo;ve had the privilege of collaborating with some very talented musicians. Here are some of the collaborations and also a few individual recordings.\nCollaborations Dream A Little Dream Of Me Cover on Instagram Instrumentals "
            }
    
]
